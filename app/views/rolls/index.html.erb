<section class="jumbotron">
  <div class="flex-container">
    <h1 id="site-title">Roll the Bones</h1>
  </div>
</section>

<div class='flex-container'>
  <div id="roll-history">
    <div class='button-container'>
      <button class="round-button" v-on:click="addBuff"></button>
    </div>
    <div class='container'>
      <ul v-for="roll in rolls" class="roll-list">
        <li v-for="buff in roll" class="buff-list-item"> 
          <buff-icon v-bind:iconClass="buff" v-bind:class="buff" class="buff-icon"></buff-icon>
        </li>
      </ul>
    </div>
  </div>
</div>

<script>
const BUFFS_ARRAY = ["Grand Melee", "Jolly Roger", "Buried Treasure", "Broadsides", "Shark Infested Waters", "True Bearing"]

var newRoll = function generateRolls() {
  let roll = []
  BUFFS_ARRAY.forEach(buff => roll.push(BUFFS_ARRAY[Math.floor(Math.random() * BUFFS_ARRAY.length)]))
  return roll
}

var frequencies = function findFrequencies(ary) {
  return ary.reduce((counter, item) => {
    let p = item;
    counter[p] = counter.hasOwnProperty(p) ? counter[p] + 1 : 1;
    return counter;
  }, {})
}

var modes = function findModes(histogram) {
  ret = histogram
  let mode = Math.max(...Object.values(ret))

  Object.keys(ret).forEach(key => {
    if (ret[key] != mode) delete ret[key];
  });
  
  return Object.keys(ret);
}

var formatAsSnakeCase = (str) => str.split(/_| |-/).join("_").toLowerCase();
var formatAsKebabCase = (str) => str.split(/_| |-/).join("-").toLowerCase();

Vue.component('buff-icon', {
  props: ['iconClass'],
  template: '<div>{{ }}</div>'
})

Vue.component('roll-display', {
  template: '<div></div>'
})


var rollHistory = new Vue({
  el: '#roll-history',
  data: {
    rolls: [],
    counter: 0
  },
    methods: {
      addBuff: function () {
        this.rolls.unshift(this.generateRoll()) 
        this.rolls.splice(5,1) // Display 5 rows.
        this.counter += 1;
      },
      generateRoll: function() {
          let roll = {
            // The order of these properties determines the order they are displayed.
            grand_melee: null,
            buried_treasure: null,
            jolly_roger: null,
            broadsides: null,
            shark_infested_waters: null,
            true_bearing: null
          }
          let buffs = (modes(frequencies(newRoll())))
          buffs = buffs.map(el => formatAsSnakeCase(el))
          
          Object.keys(roll).forEach(key => {
            if (buffs.includes(key)) roll[key] = formatAsKebabCase(key);
          });
          
          return roll
      }
  },
});

// var formattedAsSnakeCase = function formatAsSnakeCase(str) {
//   return str.split(" ").join("_").toLowerCase();
// }

// var formattedAsKebabCase = function formatAsKebabCase(arr) {
//   return arr.map(element => {
//     return element.split("_").join("-").toLowerCase();
//   })
// }

// Vue.component('counter-display', {
//   props: [counter],
//   template: '<p>{{ counter }}</p>'
// })



// Vue.component('determine-buff-icon', {
//   props: ['icon'],
//   data: function() {
//     return this.icon.replace(" ", "-").toLowerCase()
//   }
// })

// Vue.component('button-rtb'), {
//   template: '<button v-on:click="roll"></button>',
//   data: {
//     buffs: []
//   },
//   methods: {
//     roll: function() {
//       this.buffs = modes(frequencies(newRoll()))
//     }
//   }
// }
 </script>