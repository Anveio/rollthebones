<section class="jumbotron">
  <div class="flex-container">
    <h1 id="site-title">Roll the Bones</h1>
  </div>
</section>

<div class='flex-container'>
  <div id="roll-history">
    <div class='button-container'>
      <button class="rtb-button" v-on:click="addBuff" :disabled="disabled"></button>
    </div>
    <div class='rolls-container'>
      <ul v-for="(roll, index) in rolls" class="roll-list" :id="index">
        <li v-for="buff in roll" class="buff-list-item"> 
          <div :class="buff" class="buff-icon"></div>
        </li>
      </ul>
    </div>
  </div>
</div>

<script>
const BUFFS_ARRAY = ["Grand Melee", "Jolly Roger", "Buried Treasure", "Broadsides", "Shark Infested Waters", "True Bearing"]

const formatAsSnakeCase = (str) => str.split(/ |-/).join("_").toLowerCase();
const formatAsKebabCase = (str) => str.split(/_| /).join("-").toLowerCase();

var rollHistory = new Vue({
  el: '#roll-history',
  data: {
    rolls: [],
    counter: 0,
    audio: document.getElementById('rtb-audio'),
    disabled: false
  },
    methods: {
      addBuff: function () {
        // Play Sound
        this.audio.volume = 0.05;
        this.audio.currentTime = 0;
        this.audio.play();
        
        // Important data manipulation
        this.rolls.unshift(this.generateRoll()); // Newest roll is at the beginning of rolls array.
        this.rolls.splice(5); // Display only 5 rows.
        this.counter += 1;
        
        // Cooldown on button
        this.disabled = true;
        setTimeout(() => {
          this.disabled = false;
        }, 1000)
      },
      rawRoll: function() {
        // Samples from BUFFS_ARRAY six times into a new array.
        return BUFFS_ARRAY.map(element => BUFFS_ARRAY[Math.floor(Math.random() * BUFFS_ARRAY.length)])
      },
      findFrequencies: function(ary) {
        return ary.reduce((counter, item) => {
        let p = item;
        counter[p] = counter.hasOwnProperty(p) ? counter[p] + 1 : 1;
        return counter;
        }, {})
      },
      findModes: function(histogram) {
        const mode = Math.max(...Object.values(histogram))
        return Object.keys(histogram).filter(el => histogram[el] == mode)
      },
      generateRoll: function() {
        let roll = {
          // The order of these properties determines the order they are displayed.
          grand_melee: null,
          buried_treasure: null,
          jolly_roger: null,
          broadsides: null,
          shark_infested_waters: null,
          true_bearing: null
        }
        
        let buffs = (this.findModes(this.findFrequencies(this.rawRoll())));
        buffs = buffs.map(el => formatAsSnakeCase(el));
        
        // The value of the keys, if found, will become kebab case
        // The value will bind to the class of the div they are in, displaying the corresponding image.
        buffs.map(el => roll[el] = formatAsKebabCase(el));
        
        return roll;
      }
    },
});

var controller = new ScrollMagic.Controller();

var scene = new ScrollMagic.Scene({ triggerElement: '#roll-history' }).setTween("#roll-history", 0.5, { opacity: 1, scale: 2.5}).addTo(controller)

          
// const newRoll = () => BUFFS_ARRAY.map(element => BUFFS_ARRAY[Math.floor(Math.random() * BUFFS_ARRAY.length)])

// Vue.component('buff-icon', {
//   props: ['iconClass'],
//   template: '<div>{{ }}</div>'
// })

// const frequencies = function findFrequencies(ary) {
//   return ary.reduce((counter, item) => {
//     let p = item;
//     counter[p] = counter.hasOwnProperty(p) ? counter[p] + 1 : 1;
//     return counter;
//   }, {})
// }

// const modes = function findModes(histogram) {
//   const mode = Math.max(...Object.values(histogram))
//   return Object.keys(histogram).filter(el => histogram[el] == mode)
// }

// var formattedAsSnakeCase = function formatAsSnakeCase(str) {
//   return str.split(" ").join("_").toLowerCase();
// }

// var formattedAsKebabCase = function formatAsKebabCase(arr) {
//   return arr.map(element => {
//     return element.split("_").join("-").toLowerCase();
//   })
// }

// Vue.component('counter-display', {
//   props: [counter],
//   template: '<p>{{ counter }}</p>'
// })

// var modes = function findModes(histogram) {
//   let ret = histogram
//   let mode = Math.max(...Object.values(ret))

//   Object.keys(ret).forEach(key => {
//     if (ret[key] != mode) delete ret[key];
//   });
  
//   return Object.keys(ret);
// }

// Vue.component('determine-buff-icon', {
//   props: ['icon'],
//   data: function() {
//     return this.icon.replace(" ", "-").toLowerCase()
//   }
// })

// Vue.component('button-rtb'), {
//   template: '<button v-on:click="roll"></button>',
//   data: {
//     buffs: []
//   },
//   methods: {
//     roll: function() {
//       this.buffs = modes(frequencies(newRoll()))
//     }
//   }
// }

// var newRoll = function generateRolls() {
//   let roll = [];
//   BUFFS_ARRAY.forEach(buff => roll.push(BUFFS_ARRAY[Math.floor(Math.random() * BUFFS_ARRAY.length)]));
//   return roll;
// }

// var newRoll = function generateRoll() {
//   return BUFFS_ARRAY.map(element => BUFFS_ARRAY[Math.floor(Math.random() * BUFFS_ARRAY.length)])
// }

// var buffIcon = {
//   props: ['iconClass'],
//   template: '<div></div>'
// }
 </script>
 <!--<buff-icon :iconClass="buff" :class="buff" class="buff-icon"></buff-icon>-->