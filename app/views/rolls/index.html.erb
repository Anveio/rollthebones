<section class="jumbotron">
  <div class="flex-container">
    <h1 id="site-title">Roll the Bones (ALPHA)</h1>
  </div>
</section>

<div class='flex-container'>
  <div id="roll-history">
    <div class='button-container'>
      <button class="rtb-button" v-on:click="addBuff" :disabled="disabled"><audio src="/audios/roll_the_bones.ogg" id="rtb-audio"></audio></button>
    </div>
    <transition-group name="rolls" tag="div" class='rolls-container'>
      <ul v-for="(roll, index) in rolls" class="roll-list" :id="index" :key="roll">
        <li v-for="buff in roll"  :class="buff" class="buff-list-item"></li>
        <roll-grade :roll="roll"></roll-grade>
      </ul>
    </transition-group>
  </div>
</div>

<script>
const BUFFS_ARRAY = ["Grand Melee", "Jolly Roger", "Buried Treasure", "Broadsides", "Shark Infested Waters", "True Bearing"]

const formatAsSnakeCase = (str) => str.split(/ |-/).join("_").toLowerCase();
const formatAsKebabCase = (str) => str.split(/_| /).join("-").toLowerCase();


Vue.component('roll-grade', {
  props: ['roll'],
  computed: {
    gradedRoll: function() {
      score = this.calculatedScore();
      if (score >= 5.9) {
        grade = "perfect"; // Six buff
      } else if(score >= 2.66) {
        grade = "very-good"; // True-Bearing + another buff
      } else if(score >= 1.97) {
        grade = "good-enough"; // Bad three-buff or shark + one bad buff or single True-Bearing.
      } else if(score == 1.33) {
        grade = "maybe"; // Single shark
      } else {
        grade = "bad" ; // Bad one buffs, bad two buffs.
      }
      
      return grade;
    },
  },
  methods: {
    calculatedScore: function() {
      score = 0.0;
      buffs = Object.values(this.roll).filter(el => el != null);
      buffs.map(el =>{
        if (!!/true-bearing/.exec(el)) score += 2;
        if (!!/shark-infested-waters/.exec(el)) score += 1.33;
        if (!!/grand-melee|jolly-roger|buried-treasure|broadsides/.exec(el)) score += 0.66;
      })
      return score;
    }
  },
  template: '<div class="grade-segment" :class="gradedRoll"></div>'
})

var rollHistory = new Vue({
  el: '#roll-history',
  data: {
    rolls: [],
    counter: 0,
    audio: document.getElementById('rtb-audio'),
    disabled: false
  },
    methods: {
      addBuff: function () {
        // Play Sound
        this.audio.volume = 0.05;
        this.audio.currentTime = 0;
        this.audio.play();
        
        // Important data manipulation
        this.rolls.unshift(this.generateRoll()); // Newest roll is at the beginning of rolls array.
        this.rolls.splice(5); // Display only 5 rows.
        this.counter += 1;
        
        // Cooldown on button
        this.disabled = true;
        setTimeout(() => {
          this.disabled = false;
        }, 1250)
      },
      rawRoll: function() {
        // Samples from BUFFS_ARRAY six times into a new array.
        return BUFFS_ARRAY.map(element => BUFFS_ARRAY[Math.floor(Math.random() * BUFFS_ARRAY.length)])
      },
      generateHistogram: function(ary) {
        return ary.reduce((counter, item) => {
          let p = item;
          counter[p] = counter.hasOwnProperty(p) ? counter[p] + 1 : 1;
          return counter;
        }, {})
      },
      findModes: function(histogram) {
        const mode = Math.max(...Object.values(histogram))
        return Object.keys(histogram).filter(el => histogram[el] == mode)
      },
      generateRoll: function() {
        let roll = {
          // The order of these properties determines the order they are displayed.
          grand_melee: null,
          buried_treasure: null,
          jolly_roger: null,
          broadsides: null,
          shark_infested_waters: null,
          true_bearing: null
        }
        
        let buffs = (this.findModes(this.generateHistogram(this.rawRoll())));
        buffs = buffs.map(el => formatAsSnakeCase(el));
        
        // The value of the keys, if found, will become kebab case
        // The value will bind to the class of the div they are in, displaying the corresponding image.
        buffs.map(el => roll[el] = formatAsKebabCase(el));
        
        return roll;
      }
    },
});
 </script>
 
